name: MasterCI2
on:
  push:
    branches:
      - master
      - develop
jobs:
  prepareRelease:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.url }}
      github_sha_short: ${{ steps.slug.outputs.sha8 }}
      alias_release: ${{ steps.determine_release.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v1
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S')"
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Determine Alias release
        id: determine_release
        run: |
          if [[ ${{ steps.extract_branch.outputs.branch }} = master ]] ; then
              majorVersion=$(grep CLIENT_VERSION_MAJOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              minorVersion=$(grep CLIENT_VERSION_MINOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              bugfixVersion=$(grep CLIENT_VERSION_REVISION ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              echo "::set-output name=alias_release::$(printf '%s.%s.%s' $majorVersion $minorVersion $bugfixVersion)"
          else
              echo "::set-output name=alias_release::Build${{ github.run_number }}"
          fi
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Releasenotes from master
        id: create_release_master
        uses: softprops/action-gh-release@v1
        if: steps.extract_branch.outputs.branch == 'master'
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          name: "Release build #${{ github.run_number }}"
          body_path: ${{ github.workspace }}/Releasenotes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Releasenotes from Develop
        id: create_release_develop
        uses: softprops/action-gh-release@v1
        if: steps.extract_branch.outputs.branch != 'master'
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}
          name: "Continuous build #${{ github.run_number }}"
          body: |
            Build #${{ github.run_number }} from ${{ steps.date.outputs.date }}
            - This is the releasenotest text
            - tbd: this and that...
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  buildA:
    runs-on: ubuntu-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v1
      - name: Run a one-line script
        run: echo "Hello, world, we're on ${{ needs.prepareRelease.outputs.github_sha_short }}!"
      - name: Run a multi-line script
        run: |
          export ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}
          echo $ALIAS_RELEASE
          sleep 10
          echo Now go ahead!
      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias-icon-colour-03.svg
          asset_name: Alias-Icon-BuildA.svg
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

  buildB:
    runs-on: ubuntu-latest
    needs: prepareRelease
    outputs:
      upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v1
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias-icon-colour-03.svg
          asset_name: Alias-Icon-BuildB.svg
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true

  buildC:
    runs-on: ubuntu-latest
    needs: buildB
    steps:
      - uses: actions/checkout@v1
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias-icon-colour-03.svg
          asset_name: Alias-Icon-BuildC.svg
          tag: ${{ needs.buildB.outputs.alias_release }}
          overwrite: true

  # ==========================================================================
  # Build Windows version
  buildWindows:
    runs-on: windows-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Create zip archive
        run: |
          powershell Compress-Archive ${{ github.workspace }}/Alias-icon-colour-03.svg Alias.zip
          powershell "(Get-FileHash Alias.zip).Hash > Alias.sha256"
          powershell "(Get-Content Alias.sha256) | Out-File Alias.sha256 -Encoding ascii"
          type Alias.sha256
      - name: Check
        run: type Alias.sha256
      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/Alias.sha256
          tag: ${{ needs.prepareRelease.outputs.alias_release }}
          overwrite: true
